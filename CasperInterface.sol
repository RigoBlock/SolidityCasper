//! Casper Interface /* && Casper Interface contract */.
//! By Gabriele Rigo (RigoBlock, Rigo Investment Sagl), 2017.
//! Released under the Apache Licence 2.

pragma solidity ^0.4.16;

//this is the Casper Interface

interface Casper {
    
    // EVENTS

    
    // NON-CONSTANT METHODS
    
    //function initiate(uint128 _epoch_length, uint128 _withdrawal_delay, address _owner, address _sighasher, address _purity_checker, uintDECIMAL _base_interest_factor, uint8 _base_penalty_factor); //DECIMAL = uint128 + 10 decimals
    function initiate_epoch(uint128 epoch);
    function deposit(address validation_addr, address withdrawal_addr) payable;   //would be nice to have: returns (bool success);
    function logout(bytes logout_msg);
    function withdraw(uint128 validator_index);  //would be nice to have: returns (bool success);
    function proc_reward(uint128 validator_index, uint16 reward);
    function prepare(bytes prepare_msg);
    function commit(bytes commit_msg);
    function double_prepare_slash(bytes prepare1, bytes prepare2);
    function prepare_commit_inconsistency_slash(bytes prepare_msg, bytes commit_msg);
    
    
    // CONSTANT METHODS

    //function balance_of(address validator) constant returns (uint256) {}   //would be nice to have balances by address in addition of balances by validator_index

    function get_deposit_size(uint128 validator_index) constant returns (uint128);
    function get_total_curdyn_deposits() constant returns (uint128);
    function get_total_prevdyn_deposits() constant returns (uint128);
    function get_recommended_ancestry_hash() constant returns (bytes32);
    function get_recommended_source_epoch() constant returns (uint128);
    function get_recommended_source_ancestry_hash() constant returns (bytes32);
    //function get_main_hash_prepared_frac() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    //function get_main_hash_committed_frac() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    
    // IMPLIED CONSTANT METHODS
    // they get auto-generated by viper when a variable is declared public
    
    //function get_validators__deposit(uint128 arg0) constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    function get_validators__dynasty_start(uint128 arg0) constant returns (uint128);
    function get_validatos__dynasty_end(uint128 arg0) constant returns (uint128);
    function get_validators__addr(uint128 arg0) constant returns (address);
    function get_validators__withdrawal_address(uint128 arg0) constant returns (address);
    function get_validators__prev_commit_epoch(uint128 arg0) constant returns (uint128);
    
    function get_nextValidatorIndex() constant returns (uint128);
    function get_dynasty() constant returns (uint128);
    //function get_next_dynasty_wei_delta() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    //function get_second_next_dynasty_wei_delta() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    
    function get_dynasty_start_epoch(uint128 arg0) constant returns (uint128);
    function get_dynasty_in_epoch(uint128 arg0) constant returns (uint128);
    
    //function get_consensus_messages__cur_cyn_prepares(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    function get_consensus_messages__prepare_bitmap(uint128 arg0, bytes32 arg1, uint128 arg2) constant returns (uint256); //returns num256
    //function get_consensus_messages__prev_dyn_prepares(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    function get_consensus_messages__ancestry_hash_justified(uint128 arg0, bytes32 arg1) constant returns (bool);
    //function get_consensus_messages__cur_dyn_commits(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    //function get_consensus_messages__prev_dyn_commits(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    
    function get_ancestry_hashes(uint128 arg0) constant returns (bytes32);
    function get_main_has_justified() constant returns (bool);
    function get_main_hash_finalized() constant returns (bool);
    //function get_deposit_scale_factor(uint128 arg0) constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    function get_epoch_lenght() constant returns (uint128);
    function get_current_epoch() constant returns (uint128);
    function get_last_finalized_epoch() constant returns (uint128);
    function get_last_justified_epoch() constant returns (uint128);
    function get_expected_source_epoch() constant returns (uint128);
    //function get_reward_factor() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    //function get_base_interest_factor() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    //function get_base_penalty_factor() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
    //function get_current_penalty_factor() constant returns (uintDECIMAL); //DECIMAL = uint128 + 10 decimals
}

/*

//the below is the Casper Interface contract
//this is not necessary if one uses the interface
//it helps people who are used to contracts to read

contract CasperFace {
    
    //EVENTS

    
    // NON-CONSTANT METHODS
    
    //function initiate(uint128 _epoch_length, uint128 _withdrawal_delay, address _owner, address _sighasher, address _purity_checker, uintDECIMAL _base_interest_factor, uint8 _base_penalty_factor) {} //DECIMAL = uint128 + 10 decimals
    function initiate_epoch(uint128 epoch) {}
    function deposit(address validation_addr, address withdrawal_addr) payable {}   //would be nice to have: returns (bool success) {}
    function logout(bytes logout_msg) {}
    function withdraw(uint128 validator_index) {}  //would be nice to have: returns (bool success) {}
    function proc_reward(uint128 validator_index, uint16 reward) {}
    function prepare(bytes prepare_msg) {}
    function commit(bytes commit_msg) {}
    function double_prepare_slash(bytes prepare1, bytes prepare2) {}
    function prepare_commit_inconsistency_slash(bytes prepare_msg, bytes commit_msg) {}
    
    
    // CONSTANT METHODS

    //function balance_of(address validator) constant returns (uint256) {}   //would be nice to have balances by address in addition of balances by validator_index

    function get_deposit_size(uint128 validator_index) constant returns (uint128) {}
    function get_total_curdyn_deposits() constant returns (uint128) {}
    function get_total_prevdyn_deposits() constant returns (uint128) {}
    function get_recommended_ancestry_hash() constant returns (bytes32) {}
    function get_recommended_source_epoch() constant returns (uint128) {}
    function get_recommended_source_ancestry_hash() constant returns (bytes32) {}
    //function get_main_hash_prepared_frac() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    //function get_main_hash_committed_frac() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    
    // IMPLIED CONSTANT METHODS
    // they get auto-generated by viper when a variable is declared public
    
    //function get_validators__deposit(uint128 arg0) constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    function get_validators__dynasty_start(uint128 arg0) constant returns (uint128) {}
    function get_validatos__dynasty_end(uint128 arg0) constant returns (uint128) {}
    function get_validators__addr(uint128 arg0) constant returns (address) {}
    function get_validators__withdrawal_address(uint128 arg0) constant returns (address) {}
    function get_validators__prev_commit_epoch(uint128 arg0) constant returns (uint128) {}
    
    function get_nextValidatorIndex() constant returns (uint128) {}
    function get_dynasty() constant returns (uint128) {}
    //function get_next_dynasty_wei_delta() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    //function get_second_next_dynasty_wei_delta() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    
    function get_dynasty_start_epoch(uint128 arg0) constant returns (uint128) {}
    function get_dynasty_in_epoch(uint128 arg0) constant returns (uint128) {}
    
    //function get_consensus_messages__cur_cyn_prepares(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    function get_consensus_messages__prepare_bitmap(uint128 arg0, bytes32 arg1, uint128 arg2) constant returns (uint256) {} //returns num256
    //function get_consensus_messages__prev_dyn_prepares(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    function get_consensus_messages__ancestry_hash_justified(uint128 arg0, bytes32 arg1) constant returns (bool) {}
    //function get_consensus_messages__cur_dyn_commits(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    //function get_consensus_messages__prev_dyn_commits(uint128 arg0, bytes32 arg1) constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    
    function get_ancestry_hashes(uint128 arg0) constant returns (bytes32) {}
    function get_main_has_justified() constant returns (bool) {}
    function get_main_hash_finalized() constant returns (bool) {}
    //function get_deposit_scale_factor(uint128 arg0) constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    function get_epoch_lenght() constant returns (uint128) {}
    function get_current_epoch() constant returns (uint128) {}
    function get_last_finalized_epoch() constant returns (uint128) {}
    function get_last_justified_epoch() constant returns (uint128) {}
    function get_expected_source_epoch() constant returns (uint128) {}
    //function get_reward_factor() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    //function get_base_interest_factor() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    //function get_base_penalty_factor() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
    //function get_current_penalty_factor() constant returns (uintDECIMAL) {} //DECIMAL = uint128 + 10 decimals
}
*/
